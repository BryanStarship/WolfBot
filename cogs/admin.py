import discord
from discord.ext import commands
from discord import app_commands
import os
import sys
import platform
import json

class Admin(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="admin",
        description="Commandes d'administration du bot"
    )
    @app_commands.describe(action="Choisissez une action : red√©marrer, arr√™ter, obtenir des infos, afficher les changelogs ou les rappels perso")
    @app_commands.choices(action=[
        discord.app_commands.Choice(name="Red√©marrer", value="restart"),
        discord.app_commands.Choice(name="Arr√™ter", value="shutdown"),
        discord.app_commands.Choice(name="Infos", value="info"),
        discord.app_commands.Choice(name="Changelogs", value="changelogs"),
        discord.app_commands.Choice(name="Rappel Perso", value="rappel_perso")
    ])
    @app_commands.checks.has_any_role('role1', 'role2')  # V√©rifie que l'utilisateur a l'un des r√¥les sp√©cifi√©s (Les r√¥les doivent √™tre √©crit comme ceci : 'Role1', 'Role2' ect)
    async def admin(self, interaction: discord.Interaction, action: str):
        if action == "restart":
            await interaction.response.send_message("Red√©marrage du bot...", ephemeral=False)
            print("Red√©marrage du bot demand√© par", interaction.user)
            await self.bot.close()  # Ferme le bot
            os.execv(sys.executable, ['python'] + sys.argv)  # Relance le script du bot

        elif action == "shutdown":
            await interaction.response.send_message("Arr√™t du bot...", ephemeral=False)
            print("Arr√™t du bot demand√© par", interaction.user)
            await self.bot.close()  # Ferme le bot sans le relancer

        elif action == "info":
            embed = discord.Embed(
                title=f"Informations sur le bot {self.bot.user.name}",
                color=discord.Color.blue()
            )
            embed.add_field(name="Nom du bot", value=self.bot.user.name, inline=False)
            embed.add_field(name="ID du bot", value=self.bot.user.id, inline=False)
            embed.add_field(name="Version de Discord.py", value=discord.__version__, inline=False)
            embed.add_field(name="Version de Python", value=platform.python_version(), inline=False)
            embed.add_field(name="Syst√®me d'exploitation", value=platform.system(), inline=False)
            embed.add_field(name="Nombre de serveurs", value=len(self.bot.guilds), inline=False)

            await interaction.response.send_message(embed=embed, ephemeral=False)
            print(f"Infos du bot demand√©es par {interaction.user}")

        elif action == "changelogs":
            changelogs_text = (
                "**V1.0 :**\n"
                "- Cr√©ation de WolfBot\n"
                "- Cr√©ation des commandes /z, /rp, /issues, /sorci√®re, /r√©gime, !r, !ping, /m, /rage\n\n"
                "**V2.0 :**\n"
                "- Passage du code de WolfBot √† python\n"
                "- Changement d'h√©bergeur\n"
                "- Code refait √† z√©ro\n"
                "- Code des commandes /z, /rp, /issues, /sorci√®re, /r√©gime, !r, !ping, /m, /rage refait √† 100%\n"
                "- Ajout de la possibilit√© d'indiquer une dur√©e pr√©cise pour /rp\n"
                "- R√©fection des menus des commandes /issues, /m et /r√©gime\n"
                "- Ajout de plus de d√©tails dans !ping\n"
                "- Ajout d'un message d'alerte de red√©marrage du bot\n"
                "- Modifications mineures dans les textes des commandes /z, !r et /rp\n"
                "- Correction de bugs et am√©lioration de la stabilit√©\n\n"
                "**V2.1 :**\n"
                "- Retrait de l'obligation d'utiliser l'option \"raison\" de la commande /rp\n\n"
                "**V2.2 :**\n"
                "- Correction du bug \"L'application ne r√©pond pas\" avec la commande /rp lorsqu'une mauvaise dur√©e √©tait indiqu√©e\n"
                "- Correction d'erreurs dans les textes de la commande /issues\n\n"
                "**V2.3 :**\n"
                "- Ajout d'un syst√®me d'enregistrement des rappels de la commande /rp qui permet au bot d'ex√©cuter les rappels m√™me apr√®s un red√©marrage\n\n"
                "**V2.4 :**\n"
                "- Modifications du syst√®me d'enregistrement des rappels de la commande /rp\n"
                "- Ajout de la commande \"/admin\", r√©serv√©e uniquement aux Administrateurs"
            )
            
            embed = discord.Embed(
                title="üìú Changelogs WolfBot",
                description=changelogs_text,
                color=discord.Color.green()
            )

            await interaction.response.send_message(embed=embed, ephemeral=False)
            print(f"Changelogs du bot demand√©s par {interaction.user}")

        elif action == "rappel_perso":
            try:
                # Lire les rappels depuis le fichier JSON
                with open("reminders.json", "r") as file:
                    reminders = json.load(file)

                if not reminders:
                    await interaction.response.send_message("Aucun rappel perso trouv√©.", ephemeral=False)
                    return

                # Cr√©er un embed pour afficher les rappels
                embed = discord.Embed(
                    title="üìã Rappels Personnalis√©s",
                    color=discord.Color.orange()
                )

                for reminder in reminders:
                    user_name = reminder["user_name"]
                    duree = reminder["duree"]
                    raison = reminder["raison"]
                    created_at = reminder["created_at"]

                    embed.add_field(
                        name=f"Rappel pour {user_name}",
                        value=f"Dur√©e : {duree}\nRaison : {raison}\nCr√©√© le : <t:{int(created_at)}:f>",
                        inline=False
                    )

                await interaction.response.send_message(embed=embed, ephemeral=False)
                print(f"Rappels perso demand√©s par {interaction.user}")

            except FileNotFoundError:
                await interaction.response.send_message("Le fichier reminders.json est introuvable.", ephemeral=True)
                print(f"Erreur: reminders.json introuvable.")
            except json.JSONDecodeError:
                await interaction.response.send_message("Erreur de lecture des rappels personnels.", ephemeral=True)
                print(f"Erreur de lecture du fichier reminders.json.")

    @admin.error
    async def admin_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.errors.MissingAnyRole):
            await interaction.response.send_message("Vous n'avez pas les r√¥les n√©cessaires pour utiliser cette commande.", ephemeral=True)

async def setup(bot):
    await bot.add_cog(Admin(bot))
